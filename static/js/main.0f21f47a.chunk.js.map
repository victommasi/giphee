{"version":3,"sources":["store/ducks/FavoriteGifs/types.ts","styles/colors.tsx","styles/GlobalStyles.ts","components/Card/styles.ts","store/ducks/FavoriteGifs/actions.ts","hooks/useFavoriteGifs.ts","components/Card/Card.tsx","components/Grid/styles.ts","components/Grid/Grid.tsx","assets/images/logo.png","components/SideBar/styles.ts","components/SideBar/Sidebar.tsx","pages/Favorites/styles.ts","pages/Favorites/Favorites.tsx","services/api.ts","services/GifsService.ts","pages/Home/styles.ts","pages/Home/Home.tsx","router/index.tsx","store/ducks/FavoriteGifs/reducer.ts","store/ducks/FavoriteGifs/index.ts","store/ducks/rootReducer.ts","store/store.ts","App.tsx","index.tsx"],"names":["FavoriteGifsTypes","colors","createGlobalStyle","CardContainer","styled","li","useFavoriteGifs","useSelector","store","fav","Card","gif","useState","copied","setCopied","favorite","setFavorite","storedGifs","gifs","dispatch","useDispatch","useEffect","setTimeout","find","g","id","handleCopyURL","useCallback","navigator","clipboard","writeText","embed_url","handleSetFavorite","data","type","REMOVE_GIF","payload","STORE_GIF","storeGif","alt","title","src","images","fixed_height","url","className","onClick","icon","faHeart","faHeartAlt","size","color","faCopy","GridContainer","ul","Grid","forwardRef","containerRef","map","index","concat","String","current","scrollIntoView","behavior","faArrowUp","defaultProps","SideBarContainer","SideBar","logo","isActive","to","faHome","FavoritesContainer","section","Favorites","useRef","length","ref","REMOVE_ALL_GIF","api","axios","create","baseURL","interceptors","request","use","params","searchGifs","term","limit","offset","get","q","rating","fetchTredingGifs","HomeContainer","Home","scrollObserver","setGifs","setTerm","setOffset","scrollRatio","setScrollRatio","fetchGifs","a","loadInitalGifs","response","loadMoreGifs","newOffset","intersectionObserver","IntersectionObserver","entries","ratio","intersectionRatio","observe","disconnect","handleTermChange","event","newTerm","target","value","faSearch","placeholder","onChange","Router","path","element","INITIAL_STATE","addGif","state","action","removeGif","filter","reducer","combineReducers","persistConfig","key","storage","whitelist","composeEnhancers","applyMiddleware","persistedReducer","persistReducer","rootReducer","createStore","persistor","persistStore","App","basename","process","GlobalStyles","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0f21f47a.chunk.js","sourcesContent":["/**\r\n * Action types\r\n */\r\nexport enum FavoriteGifsTypes {\r\n  STORE_GIF = '@favorite/STORE_GIF',\r\n  REMOVE_GIF = '@favorite/REMOVE_GIF',\r\n  REMOVE_ALL_GIF = '@favorite/REMOVE_ALL_GIF',\r\n}\r\n\r\n/**\r\n * Data types\r\n */\r\n\r\nexport interface Gif {\r\n  id: string,\r\n  images: any,\r\n  title: string,\r\n  embed_url: string,\r\n  username: string,\r\n}\r\n\r\nexport interface Gifs {\r\n  gifs: Gif[];\r\n}\r\n\r\n/**\r\n * State type\r\n */\r\nexport interface FavoriteGifsState extends Gifs {}\r\n","export const colors = {\r\n  primary: '#5e42a6',\r\n  secondary: '#b0a4df',\r\n\r\n  gray10: '#EDF2F7',\r\n  gray50: '#E6E4E3',\r\n  gray100: '#7E7E7E',\r\n  gray200: '#575756',\r\n  \r\n  purple: '#312450',\r\n  lightRed: '#FF4238',\r\n  red: '#db2828',\r\n  yellow: '#fbbd08',\r\n  orange: '#f2711c',\r\n  lightGreen: '#4DE3B6',\r\n  green: '#48BB78',\r\n  blue: '#0099FF',\r\n\r\n  white: '#fff',\r\n  black: '#000',\r\n  transparent: 'transparent',\r\n};\r\n","import { createGlobalStyle } from 'styled-components';\r\nimport { colors } from './colors';\r\n\r\nexport default createGlobalStyle`\r\n  .App {\r\n    display: flex;\r\n    align-items: center;\r\n    height: inherit;\r\n    background-color: ${colors.primary};\r\n  }\r\n`;\r\n","import styled from 'styled-components';\r\nimport { colors } from '../../styles/colors';\r\n\r\nexport const CardContainer = styled.li`\r\n  height: 170px;\r\n  width: 280px;\r\n  position: relative;\r\n  border-radius: 6px;\r\n  box-shadow: 0px 2px 10px -4px rgba(0, 0, 0, 1);\r\n\r\n  &::before {\r\n    content: '';\r\n    width: 100%;\r\n    height: 100%;\r\n    position: absolute;\r\n    transition: background-color 0.2s ease-in-out;\r\n    border-radius: 6px;\r\n  }\r\n\r\n  &:hover:before {\r\n    background-color: rgba(0, 0, 0, 0.7);\r\n  }\r\n\r\n  &:hover {\r\n    .Card__info {\r\n      display: grid;\r\n      place-content: center;\r\n    }\r\n  }\r\n\r\n  img {\r\n    height: 100%;\r\n    width: 100%;\r\n    object-fit: cover;\r\n    border-radius: 6px;\r\n  } \r\n\r\n  .Card__info {\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    display: none;\r\n    width: 100%;\r\n    height: 100%;\r\n    z-index: 2;\r\n  }\r\n  \r\n  .Card__title, .Card__button {\r\n    color: white;\r\n    font-size: 14px;\r\n    font-weight: 600;\r\n    width: 100%;\r\n    padding: 0 15px;\r\n    margin-bottom: 5px;\r\n  }\r\n\r\n  .Card__button {\r\n    background: none;\r\n    border: none;\r\n    transition: opacity 0.2s ease-in-out;\r\n\r\n    &:hover {\r\n      opacity: 0.7;\r\n    }\r\n  }\r\n\r\n  svg {\r\n    margin-left: 5px;\r\n  }\r\n\r\n  .Card__copied {\r\n    position: absolute;\r\n    bottom: 10px;\r\n    left: 40%;\r\n    color: ${colors.orange};\r\n    text-shadow: 2px 2px black;\r\n  }\r\n\r\n  .Card__icon-fav {\r\n    position: absolute;\r\n    top: 10px;\r\n    left: 80%;\r\n    width: 50px;\r\n  }\r\n\r\n  @media screen and (max-width: 475px) {\r\n    height: 120px;\r\n    width: 220px;\r\n\r\n    .Card__title {\r\n      font-size: 10px;\r\n      padding: 5px;\r\n      max-height: 45px;\r\n      display: -webkit-box;\r\n\t\t\t-webkit-line-clamp: 3;\r\n\t\t\t-webkit-box-orient: vertical;\r\n\t\t\toverflow: hidden;\r\n    }\r\n  }\r\n  \r\n  @media screen and (min-width: 475px) and (max-width: 767px) {\r\n    height: 150px;\r\n    width: 260px;\r\n\r\n    .Card__title {\r\n      font-size: 11px;\r\n      padding: 5px;\r\n      max-height: 45px;\r\n      display: -webkit-box;\r\n\t\t\t-webkit-line-clamp: 3;\r\n\t\t\t-webkit-box-orient: vertical;\r\n\t\t\toverflow: hidden;\r\n    }\r\n  }\r\n`;\r\n","import { FavoriteGifsTypes, Gif } from './types';\r\n\r\nexport const storeGif = (data: Gif) => ({\r\n  type: FavoriteGifsTypes.STORE_GIF,\r\n  payload: {\r\n    data,\r\n  },\r\n});\r\n\r\nexport const removeGif = (data: Gif) => ({\r\n  type: FavoriteGifsTypes.REMOVE_GIF,\r\n  payload: {\r\n    data,\r\n  },\r\n});\r\n\r\nexport const removeAllGifs = () => ({\r\n  type: FavoriteGifsTypes.REMOVE_ALL_GIF,\r\n});\r\n","import { useSelector } from 'react-redux';\r\nimport { ApplicationState } from '../store/store';\r\n\r\nexport const useFavoriteGifs = () => {\r\n  return useSelector((store: ApplicationState) => store.fav);\r\n}","import React, { useCallback, useEffect, useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCopy, faHeart } from '@fortawesome/free-solid-svg-icons'\r\nimport { faHeart as faHeartAlt } from '@fortawesome/free-regular-svg-icons'\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { CardContainer } from './styles';\r\nimport { colors } from '../../styles/colors';\r\nimport { Gif } from '../../store/ducks/FavoriteGifs/types';\r\nimport { removeGif, storeGif } from '../../store/ducks/FavoriteGifs/actions';\r\nimport { useFavoriteGifs } from '../../hooks/useFavoriteGifs';\r\n\r\ntype CardProps = {\r\n  gif: Gif,\r\n}\r\n\r\nconst Card: React.FC<CardProps> = ({ gif }) => {\r\n  const [copied, setCopied] = useState<boolean>(false);\r\n  const [favorite, setFavorite] = useState<boolean>(false);\r\n  const { gifs: storedGifs } = useFavoriteGifs();\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (copied) {\r\n      setTimeout(() => setCopied(false), 2000);\r\n    }\r\n\r\n  }, [copied]);\r\n\r\n  useEffect(() => {\r\n    const isFavorite = storedGifs.find((g: Gif) => g.id === gif.id)\r\n    if (isFavorite) {\r\n      setFavorite(true);\r\n    }\r\n  }, [gif.id, storedGifs])\r\n\r\n  const handleCopyURL = useCallback(() => {\r\n    navigator.clipboard.writeText(gif.embed_url);\r\n    setCopied(true);\r\n  }, [gif.embed_url]);\r\n\r\n  const handleSetFavorite = useCallback(() => {\r\n    setFavorite(!favorite);\r\n    \r\n    if (favorite) {\r\n      dispatch(removeGif(gif));\r\n    } else {\r\n      dispatch(storeGif(gif));\r\n    }\r\n  }, [dispatch, favorite, gif]);\r\n\r\n  return <CardContainer>\r\n    <img alt={gif.title} title={gif.title} src={gif.images.fixed_height.url}/>\r\n    <div className=\"Card__info\">\r\n      <button className=\"Card__button Card__icon-fav\" title=\"button\" onClick={handleSetFavorite}>\r\n        <FontAwesomeIcon icon={favorite ? faHeart : faHeartAlt} size=\"lg\" color={favorite ? colors.lightRed : colors.white} />\r\n      </button>\r\n      <p className=\"Card__title\">{gif.title}</p>\r\n      <button className=\"Card__button\" title=\"button\" onClick={handleCopyURL}>\r\n        Copy URL\r\n        <FontAwesomeIcon icon={faCopy} size=\"lg\" color={colors.white} />\r\n      </button>\r\n      {copied && <span className=\"Card__copied\">Copied!</span>}\r\n    </div>\r\n  </CardContainer>;\r\n}\r\n\r\nexport default Card;","import styled from 'styled-components';\r\n\r\nexport const GridContainer = styled.ul`\r\n  display: grid;\r\n  gap: 20px;\r\n  max-width: 900px;\r\n  margin: 0 auto;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  margin-top: 50px;\r\n  justify-items: center;\r\n  overflow-y: auto;\r\n\r\n  @media screen and (max-width: 1024px) {\r\n    grid-template-columns: repeat(1, 1fr);\r\n  }\r\n\r\n  @media screen and (min-width: 1024px) and (max-width: 1320px) {\r\n    grid-template-columns: repeat(2, 1fr);\r\n  }\r\n`;\r\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { ForwardedRef, forwardRef } from \"react\";\r\nimport Card from \"../Card/Card\";\r\nimport { GridContainer } from \"./styles\";\r\nimport { faArrowUp } from '@fortawesome/free-solid-svg-icons'\r\nimport { colors } from \"../../styles/colors\";\r\nimport { Gif } from \"../../store/ducks/FavoriteGifs/types\";\r\n\r\ntype GridProps = {\r\n  gifs: Gif[];\r\n}\r\n\r\nconst Grid = forwardRef(({ gifs }: GridProps, containerRef: ForwardedRef<HTMLDivElement> | any) => {\r\n\r\n  const handleScrollTop = () => {\r\n    containerRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }\r\n\r\n  return gifs && (\r\n    <section>\r\n      <GridContainer>\r\n          {gifs.map((gif: Gif, index: number) => (\r\n            <Card key={gif?.id.concat(String(index))} gif={gif} />\r\n          ))}\r\n        <button type=\"button\" className=\"fab-button\" onClick={handleScrollTop}>\r\n          <FontAwesomeIcon icon={faArrowUp} size=\"lg\" color={colors.white} />\r\n        </button>\r\n      </GridContainer>\r\n    </section>\r\n  );\r\n})\r\n\r\nGrid.defaultProps = {\r\n  gifs: [] \r\n};\r\n\r\nexport default Grid;\r\n","export default __webpack_public_path__ + \"static/media/logo.3aa2711d.png\";","import styled from 'styled-components';\r\nimport { colors } from '../../styles/colors';\r\n\r\nexport const SideBarContainer = styled.ul`\r\n  text-align: center;\r\n  height: 100%;\r\n  width: 200px;\r\n  background-color: ${colors.purple};\r\n  position: fixed;\r\n  z-index: 1;\r\n  top: 0;\r\n  left: 0;\r\n  overflow-x: hidden;\r\n  padding-top: 20px;\r\n  transition: width ease-out 300ms;\r\n\r\n  @media screen and (max-width: 768px) {\r\n    width: 70px;\r\n  }\r\n\r\n  img {\r\n    width: 100px;\r\n    height: auto;\r\n\r\n    @media screen and (max-width: 768px) {\r\n      width: 40px;\r\n    }\r\n  }\r\n\r\n  .nav {\r\n    a {\r\n      position: relative;\r\n      margin: 2em 0;\r\n      font-size: 0.7em;\r\n      line-height: 5em;\r\n      text-transform: uppercase;\r\n      text-decoration: none;\r\n      letter-spacing: 0.4em;\r\n      color: rgba(255, 255, 255, 0.3);\r\n      display: block;\r\n      transition: all ease-out 300ms;\r\n\r\n      &.active {\r\n        color: white;\r\n\r\n        .icon {\r\n          color: white\r\n        }\r\n      }\r\n      \r\n      &:not(.active)::after {\r\n        opacity: 0.2;\r\n      }\r\n      \r\n      &:not(.active):hover {\r\n        color: rgba(255, 255, 255, 0.75);\r\n\r\n        .icon {\r\n          color: rgba(255, 255, 255, 0.75);\r\n        }\r\n      }\r\n      \r\n      &::after {\r\n        content: '';\r\n        position: absolute;\r\n        width: 100%;\r\n        height: 0.2em;\r\n        background: black;\r\n        left: 0;\r\n        bottom: 0;\r\n        background-image: linear-gradient(to right, ${colors.primary}, ${colors.secondary})\r\n      }\r\n\r\n      .icon {\r\n        color: rgba(255, 255, 255, 0.3);\r\n        margin-right: 10px;\r\n        transition: all ease-out 300ms;\r\n      }\r\n\r\n      @media screen and (max-width: 768px) {\r\n        .icon {\r\n          margin-right: 0;\r\n        }\r\n\r\n        .text {\r\n          display: none;\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n`;\r\n","import { faHome, faHeart } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport logo from '../../assets/images/logo.png'\r\nimport { colors } from '../../styles/colors';\r\n\r\nimport { SideBarContainer } from './styles';\r\n\r\nconst SideBar: React.FC = () => {\r\n  return (\r\n    <SideBarContainer>\r\n      <aside className=\"aside\">\r\n        <img src={logo} alt=\"lgo\" />\r\n        <nav className=\"nav\">\r\n          <NavLink className={({ isActive }) => isActive ? \"active\" : \"\"} to=\"/home\">\r\n            <FontAwesomeIcon className=\"icon\" icon={faHome} size=\"lg\" color={colors.secondary} />\r\n            <span className=\"text\">Home</span>\r\n          </NavLink>\r\n          <NavLink className={({ isActive }) => isActive ? \"active\" : \"\"} to=\"/favorites\">\r\n            <FontAwesomeIcon className=\"icon\" icon={faHeart} size=\"lg\" color={colors.secondary} />\r\n            <span className=\"text\">Favorites</span>\r\n          </NavLink>\r\n        </nav>\r\n    </aside>\r\n    </SideBarContainer>\r\n)};\r\n\r\nexport default SideBar;","import styled from 'styled-components';\r\nimport { colors } from '../../styles/colors';\r\n\r\nexport const FavoritesContainer = styled.section`\r\n    max-width: 1400px;\r\n    max-height: 860px;\r\n    margin: 0 auto;\r\n    padding: 0 30px;\r\n    background-color: ${colors.primary};\r\n    overflow-y: auto;\r\n    height: 100%;\r\n\r\n    @media screen and (max-width: 475px) {\r\n      margin: 0 0 0 auto;\r\n      padding-top: 20px;\r\n      padding-bottom: 20px;\r\n    }\r\n\r\n    ::-webkit-scrollbar {\r\n      width: 10px;\r\n    }\r\n\r\n    ::-webkit-scrollbar-track {\r\n      background: ${colors.secondary}; \r\n    }\r\n    \r\n    ::-webkit-scrollbar-thumb {\r\n      background: ${colors.gray10}; \r\n    }\r\n\r\n    ::-webkit-scrollbar-thumb:hover {\r\n      background: ${colors.gray50}; \r\n    }\r\n  }\r\n\r\n  h1 {\r\n    font-size: 18px;\r\n    font-weight: 600;\r\n    color: ${colors.secondary};\r\n    width: 100%;\r\n\r\n    @media screen and (max-width: 767px) {\r\n      font-size: 14px;\r\n    }\r\n  }\r\n\r\n  .remove-btn {\r\n    background: ${colors.secondary};\r\n    border: none;\r\n    width: 120px;\r\n    border-radius: 4px;\r\n    padding: 10px;\r\n    color: ${colors.white};\r\n    font-weight: 600;\r\n    transition: all 0.2s ease-in-out;\r\n    opacity: 0.9;\r\n\r\n    &:hover, &:focus {\r\n      opacity: 0.7;\r\n    }\r\n  }\r\n\r\n  .fab-button {\r\n    position: fixed;\r\n    width: 50px;\r\n    height: 50px;\r\n    border-radius: 50%;\r\n    background-color: ${colors.secondary};\r\n    border: none;\r\n    inset: 90% 0% 0% 90%;\r\n    box-shadow: 0px 2px 10px -4px rgba(0, 0, 0, 1);\r\n    transition: opacity .2s ease-in-out;\r\n\r\n    &:hover, &:focus {\r\n      opacity: 0.7;\r\n    }\r\n\r\n    @media screen and (max-width: 425px) {\r\n      inset: 90% 0% 0% 80%;\r\n    }\r\n`;\r\n","import React, { useRef } from 'react';\r\nimport Grid from '../../components/Grid/Grid';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport '../../App.css'\r\nimport SideBar from '../../components/SideBar/Sidebar';\r\n\r\nimport { FavoritesContainer } from './styles';\r\nimport { useFavoriteGifs } from '../../hooks/useFavoriteGifs';\r\nimport { removeAllGifs } from '../../store/ducks/FavoriteGifs/actions';\r\n\r\nconst Favorites: React.FC = () => {\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const { gifs: storedGifs } = useFavoriteGifs();\r\n  const dispatch = useDispatch();\r\n\r\n  const handleRemoveAll = () => {\r\n    dispatch(removeAllGifs());\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <SideBar  />\r\n    <FavoritesContainer>\r\n      {storedGifs.length > 0 ? (\r\n        <>\r\n        <div ref={containerRef}>\r\n          <button type=\"button\" className=\"remove-btn\" onClick={handleRemoveAll}>\r\n            Remove All\r\n          </button>\r\n        </div>\r\n        <Grid gifs={storedGifs} ref={containerRef} />\r\n        </>\r\n      ) : (\r\n        <h1>No gif found</h1>\r\n      )}\r\n    </FavoritesContainer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Favorites;","import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n  baseURL: 'https://api.giphy.com/v1/gifs/',\r\n});\r\n\r\napi.interceptors.request.use((request) => {\r\n  request.params = request.params || {};\r\n  request.params['api_key'] = 'dc6zaTOxFJmzC';\r\n  return request;\r\n});\r\n\r\n\r\n\r\nexport default api;\r\n","import api from \"./api\";\r\n\r\nexport const searchGifs = (term: string, limit: number, offset: number) => {\r\n  return api.get('/search', {\r\n    params:\r\n    {\r\n      q: term,\r\n      limit: limit,\r\n      offset: offset,\r\n      rating: 'g'\r\n    }\r\n  });\r\n}\r\n\r\nexport const fetchTredingGifs = (limit: number, offset: number) => {\r\n  return api.get('/trending', {\r\n    params:\r\n    {\r\n      limit: limit,\r\n      offset: offset,\r\n      rating: 'g'\r\n    }\r\n  });\r\n}","import styled from 'styled-components';\r\nimport { colors } from '../../styles/colors';\r\n\r\nexport const HomeContainer = styled.section`\r\n    max-width: 1400px;\r\n    max-height: 860px;\r\n    margin: 0 auto;\r\n    padding: 0px 30px;\r\n    background-color: ${colors.primary};\r\n    overflow-y: auto;\r\n\r\n    @media screen and (max-width: 475px) {\r\n      margin: 0 0 0 auto;\r\n      padding-top: 20px;\r\n      padding-bottom: 20px;\r\n    }\r\n\r\n    ::-webkit-scrollbar {\r\n      width: 10px;\r\n    }\r\n\r\n    ::-webkit-scrollbar-track {\r\n      background: ${colors.secondary}; \r\n    }\r\n    \r\n    ::-webkit-scrollbar-thumb {\r\n      background: ${colors.gray10}; \r\n    }\r\n\r\n    ::-webkit-scrollbar-thumb:hover {\r\n      background: ${colors.gray50}; \r\n    }\r\n  }\r\n\r\n  .search {\r\n    text-align: left;\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n\r\n  .search > input {\r\n    background-color: transparent;\r\n    border: none;\r\n    font-size: 18px;\r\n    font-weight: 600;\r\n    color: ${colors.secondary};\r\n    margin-left: 10px;\r\n    width: 100%;\r\n\r\n    @media screen and (max-width: 767px) {\r\n      font-size: 14px;\r\n    }\r\n  }\r\n\r\n  .search > input::placeholder {\r\n    color: ${colors.secondary};\r\n    font-weight: 600;\r\n  }\r\n\r\n  .fab-button {\r\n    position: fixed;\r\n    width: 50px;\r\n    height: 50px;\r\n    border-radius: 50%;\r\n    background-color: ${colors.secondary};\r\n    border: none;\r\n    inset: 90% 0% 0% 90%;\r\n    box-shadow: 0px 2px 10px -4px rgba(0, 0, 0, 1);\r\n    transition: opacity .2s ease-in-out;\r\n    opacity: 0.9;\r\n\r\n    &:hover, &:focus {\r\n      opacity: 0.7;\r\n    }\r\n\r\n    @media screen and (max-width: 425px) {\r\n      inset: 90% 0% 0% 80%;\r\n    }\r\n`;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\r\nimport Grid from '../../components/Grid/Grid';\r\n\r\nimport '../../App.css'\r\nimport { fetchTredingGifs, searchGifs } from '../../services/GifsService';\r\nimport { colors } from '../../styles/colors';\r\nimport SideBar from '../../components/SideBar/Sidebar';\r\n\r\nimport { HomeContainer } from './styles';\r\nimport { Gif } from '../../store/ducks/FavoriteGifs/types';\r\n\r\nconst Home: React.FC = () => {\r\n  const scrollObserver = useRef() as React.MutableRefObject<HTMLInputElement>;\r\n  const [gifs, setGifs] = useState<Gif[]>([]);\r\n  const [term, setTerm] = useState('');\r\n  const [offset, setOffset] = useState(0);\r\n  const [scrollRatio, setScrollRatio] = useState<number>(0);\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n\r\n  const fetchGifs = async (term: string, offset?: number) => {\r\n    if (term.length > 1) {\r\n      return await searchGifs(term, 15, offset || 0);\r\n    } else {\r\n      return await fetchTredingGifs(15, offset || 0);\r\n    }\r\n  }\r\n\r\n  const loadInitalGifs = useCallback(async () => {\r\n    const response = await fetchGifs(term);\r\n    setGifs(response.data.data);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    loadInitalGifs();\r\n  }, [loadInitalGifs]);\r\n\r\n  const loadMoreGifs = async () => {\r\n    const newOffset = offset + 10;\r\n    setOffset(newOffset)\r\n    let response = await fetchGifs(term, newOffset);\r\n    setGifs([...gifs, ...response.data.data]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (scrollRatio > 0) {\r\n      loadMoreGifs();\r\n    }\r\n\r\n    const intersectionObserver = new IntersectionObserver((entries) => {\r\n      const ratio = entries[0].intersectionRatio;\r\n      setScrollRatio(ratio);\r\n    })\r\n\r\n    intersectionObserver.observe(scrollObserver.current)\r\n\r\n    return () => {\r\n      intersectionObserver.disconnect();\r\n    }\r\n  }, [scrollRatio])\r\n\r\n  const handleTermChange = useCallback(async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    let newTerm = event.target.value;\r\n    setTerm(newTerm);\r\n    const response = await fetchGifs(newTerm);\r\n    setGifs(response.data.data);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n    <SideBar  />\r\n    <HomeContainer>\r\n      <div className=\"search\" ref={containerRef}>\r\n        <FontAwesomeIcon icon={faSearch} size=\"lg\" color={colors.secondary} />\r\n        <input type=\"text\" placeholder=\"Find your gif and share it\" onChange={handleTermChange} />\r\n      </div>\r\n      <Grid gifs={gifs} ref={containerRef} />\r\n      <div ref={scrollObserver} />\r\n    </HomeContainer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n\r\n\r\n","import React from \"react\";\r\nimport {\r\n  Route,\r\n  Routes,\r\n  Navigate\r\n} from \"react-router-dom\";\r\nimport Favorites from \"../pages/Favorites/Favorites\";\r\nimport Home from \"../pages/Home/Home\";\r\n\r\nconst Router = () => {\r\n  return (\r\n    <Routes>\r\n      <Route path=\"*\" element={<Navigate to =\"/home\" />}/>\r\n      <Route path=\"/favorites\" element={<Favorites />} />\r\n      <Route path=\"/home\" element={<Home />} />\r\n    </Routes>\r\n  )\r\n}\r\n\r\nexport default Router;","import { Reducer } from 'redux';\r\nimport { FavoriteGifsTypes, FavoriteGifsState, Gif } from './types';\r\n\r\nconst INITIAL_STATE: FavoriteGifsState = {\r\n  gifs: []\r\n};\r\n\r\nconst addGif = (state: FavoriteGifsState, action: any): FavoriteGifsState => {\r\n  return { ...state, gifs: [ ...state.gifs, action.payload.data ] };\r\n}\r\n\r\nconst removeGif = (state: FavoriteGifsState, action: any): FavoriteGifsState => {\r\n  return {\r\n    ...state,\r\n    gifs: state.gifs.filter((gif: Gif) => gif.id !== action.payload.data.id)\r\n  };\r\n}\r\n\r\nconst reducer: Reducer<any> = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case FavoriteGifsTypes.STORE_GIF:\r\n      return addGif(state, action);\r\n    case FavoriteGifsTypes.REMOVE_GIF:\r\n      return removeGif(state, action);\r\n    case FavoriteGifsTypes.REMOVE_ALL_GIF:\r\n      return INITIAL_STATE;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import reducer from './reducer';\r\n\r\nexport default reducer;\r\n","import { combineReducers } from 'redux';\r\n\r\nimport fav from './FavoriteGifs';\r\n\r\nexport default combineReducers({\r\n  fav,\r\n});\r\n","import { createStore, applyMiddleware, Store } from 'redux';\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport { FavoriteGifsState } from './ducks/FavoriteGifs/types';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport rootReducer from './ducks/rootReducer';\r\n\r\nexport interface ApplicationState {\r\n  fav: FavoriteGifsState;\r\n}\r\n\r\nconst persistConfig = {\r\n  key: 'giphee',\r\n  storage,\r\n  whitelist: ['fav'],\r\n};\r\n\r\nconst composeEnhancers =\r\n  process.env.NODE_ENV === 'development'\r\n    ? composeWithDevTools(applyMiddleware())\r\n    : applyMiddleware();\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\n\r\nconst store: Store<ApplicationState> = createStore(persistedReducer, composeEnhancers);\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport { store, persistor };\r\n","import React from 'react';\nimport GlobalStyles from './styles/GlobalStyles';\nimport {\n  BrowserRouter,\n} from \"react-router-dom\";\nimport './App.css'\nimport Router from './router';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from './store/store';\n\nconst App = () => {\n  return (\n      <main className=\"App\">\n         <Provider store={store}>\n            <PersistGate persistor={persistor}>\n              <BrowserRouter basename={process.env.PUBLIC_URL}>\n                  <GlobalStyles />\n                  <Router />\n              </BrowserRouter>\n            </PersistGate>\n          </Provider>\n      </main>\n  );\n}\n\nexport default App;\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>\n  , document.getElementById('root'));\n\n"],"sourceRoot":""}